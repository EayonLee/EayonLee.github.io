[{"content":"1 简介 Supervisor是用Python开发的一套通用的进程管理工具，能将一个普通的命令行变为后台Daemon，并监控进程状态，异常退出时能自动重启。是通过 fork/exec 的方式把这些被管理的进程当作Supervisor的子进程来启动，这样只要在Supervisor的配置文件中，把要管理的进程可执行文件的路径写进去即可。\nSupervisor主要分为以下四个核心部分：\nSupervisord：它是Supervisor服务的主要管理器，运行Supervisor时会启动一个进程Supervisord，它负责启动所管理的进程；并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启 Supervisorctl：这是Supervisor服务的客户端命令行工具，可以用来执行stop、start、restart等命令来对这些子进程进行管理 Web Server：这是Supervisor服务的网页可视化界面，可以通过Web界面查看和控制进程状态，简化了对操作命令的学习 xml-rpc interface：服务于Web UI的同一个HTTP服务器，提供一个xml-rpc接口，可以用来查询和控制管理程序及其他运行的程序 官网：www.supervisord.org。\n2 Supervisor服务运行环境说明 Supervisor可以运行在大多数泪Unix系统，但是不能运行在任何Windows系统，Supervisor运行在Python环境中，可以在Python2和Python3版本上工作。\n3 Supervisor 安装 由于我是Ubuntu系统所以这里使用apt的方式，CentOS自行使用yum\n当然你也可以通过安装python-pip，然后通过pip install supervisor来安装Supervisor也是没问题的\n# 安装 sudo apt update \u0026amp;\u0026amp; sudo apt install supervisor # 验证 sudo systemctl status supervisor supervisord -version 4 配置进程管理 Supervisor安装完成之后会在系统中生成两个主要的配置文件：\n主进程配置文件：/etc/supervisor/supervisord.conf\n子进程配置文件目录：/etc/supervisor/conf.d/\n注意：如果你是用pip方式安装的Supervisor，默认是没有主进程和子进程配置文件的，但你可以通过echo_supervisord_conf \u0026gt; /etc/supervisor/supervisord.conf命令生成一个主进程配置文件，然后通过mkdir /etc/supervisor/conf.d生成一个子进程配置文件目录\n4.1 Supervisord 配置及启动 如下为完整的supervisord.conf配置文件\n;开头的代表注释，有可能你默认的配置文件和下面的不一样，你可以按照下面的配置进行相应的增加，如下是4.1.0版本完整配置\n有些路径配置尽量保持你默认配置不要修改\n[unix_http_server] file=/var/run/supervisor.sock ; socket套接字文件的路径，用于客户端和服务端建立本地连接 chmod=0700 ;socket文件的权限，默认是0700 ;chown=nobody:nogroup ;socket文件属主与属组信息设定，格式：uid:gid，注释掉使用默认就行 ;[inet_http_server] ;Web界面配置，默认是没有的（关闭），一般企业里使用也不打开 ;port=127.0.0.1:9901 ;Web管理后台运行的IP和端口，如果开放到公网切部署在云服务器，这里应该是内网ip ;username=user ;登录管理后台的用户名 ;password=123 ;登录管理后台的密码 [supervisord] logfile=/var/log/supervisor/supervisord.log ;主日志文件;默认为$CWD/supervisor.log logfile_maxbytes=50MB ;日志文件大小，超出会rotate，默认50MB，如果设置成0表示不限制大小 logfile_backups=10 ;主日志文件的备份数量，默认是10，设为0表示不备份 loglevel=info ;日志级别，默认为info,其它值为“debug,warn,trace” pidfile=/var/run/supervisord.pid ;supervisord服务进程pid文件，如果没有改文件也就说明supervisord没有运行 nodaemon=false ;是否在前台启动，默认是false，即以daemon（后台）的方式启动 minfds=65536 ;可以打开的文件描述符的最小值，默认 1024，企业中可以调整到最大65536 minprocs=200 ;可以打开的进程数的最小值，默认 200,企业中默认200够用 ;如下全部注释掉，一般也不使用，需要时可按需打开 ;umask=022 ; (process file creation umask;default 022) ;user=chrism ; (default is current user, required if root) ;identifier=supervisor ; (supervisord identifier, default is \u0026#39;supervisor\u0026#39;) ;directory=/tmp ; (default is not to cd during start) ;nocleanup=true ; (don\u0026#39;t clean up tempfiles at start;default false) ;childlogdir=/tmp ; (\u0026#39;AUTO\u0026#39; child log dir, default $TEMP) ;environment=KEY=value ; (key value pairs to add to environment) ;strip_ansi=false ; (strip ansi escape codes in logs; def. false)[supervisorctl] [rpcinterface:supervisor] ;用于外部程序或工具通过rpc接口与 Supervisor 通信和控制被监控的进程。比如supervisorctl，一定要添加，不然supervisorctl用不了 supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface [supervisorctl] serverurl=unix:///var/run/supervisor.sock ; supervisorctl通过socket连接supervisord服务端，路径需要和与unix_http_server中的file一致，该方式也就是通过本地的方式连接 ;如果你想通过网络http的方式可以使用下面的配置，但是下面和上面的serverurl不能共存，切记 ;serverurl=http://127.0.0.1:9001 ;通过HTTP的方式连接supervisord ;username=chris ; should be same as http_username if set ;password=123 ; should be same as http_password if set ;prompt=mysupervisor ; cmd line prompt (default \u0026#34;supervisor\u0026#34;) ;history_file=~/.sc_history ; use readline history if available;[program:xx]是被管理的进程配置参数，xx是进程的名称 [include] files = /etc/supervisor/conf.d/*.ini ;相当于是引入其他的配置文件进来，支持ini和conf，一般program配置我们不会写在当前配置文件中，都会单独写在外面，所以就可以通过include进行引入 修改完配置文件之后先查看是否已启动supervisord，如果启动需要重启加载我们新更新的配置\n# 查看进程 root@bj-ubuntu-eayon:~# ps -ef | grep supervisord root 3463154 1 0 Sep02 ? 00:00:09 /usr/bin/python3 /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf root 3878074 3876890 0 12:06 pts/0 00:00:00 vim supervisord.conf root 3894307 3893980 0 13:12 pts/2 00:00:00 grep --color=auto supervisord # kill supervisord root@bj-ubuntu-eayon:~# kill -9 3463154 指定supervisord.conf配置文件启动supervisord\nsupervisord -c /etc/supervisor/supervisord.conf 如果出现Unlinking stale socket /var/run/supervisor.sock错误，可以通过sudo rm /var/run/supervisor.sock删除后重试\n启动好之后建议通过ps -ef | grep supervisord查看启动进程，如果出现两个的话讲最旧的进行删除。\n访问Web\n4.2 Program 子进程配置文件 比如我们现在想要通过Supervisor来管理一个Nginx，首先先下载一个Nginx\nsudo apt install nginx # 下载完之后他会默认启动，可以看一下 root@bj-ubuntu-eayon:/opt# systemctl status nginx ● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2023-09-03 14:41:16 CST; 13s ago Docs: man:nginx(8) Main PID: 3936874 (nginx) Tasks: 3 (limit: 2262) Memory: 5.4M CGroup: /system.slice/nginx.service ├─3936874 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; ├─3936875 nginx: worker process └─3936876 nginx: worker process # 那我们先把它给kill掉 root@bj-ubuntu-eayon:/opt# ps -ef | grep nginx root 3936874 1 0 14:41 ? 00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; www-data 3936875 3936874 0 14:41 ? 00:00:00 nginx: worker process www-data 3936876 3936874 0 14:41 ? 00:00:00 nginx: worker process root 3937378 3893980 0 14:42 pts/2 00:00:00 grep --color=auto nginx root@bj-ubuntu-eayon:/opt# kill -9 3936874 3936875 3936876 Program配置文件就是配置我们要管理的进程的配置文件。当然也可以把下面所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过在supervisord.conf中通过include 的方式把不同的程序（组）写到不同的配置文件里。\n由于我们的子进程配置文件目录是/etc/supervisor/conf.d/，所以我们需要在该目录下创建/etc/supervisor/conf.d/nginx.ini\n[program:nginx] ; 当前被管理程序，格式: [program:xxx] 后面的名字可以随意 command=/usr/sbin/nginx -g \u0026#39;daemon off;\u0026#39; ; 程序启动命令，跟手动在命令行启动的命令是一样的 autostart=true ; 当前被管理程序是否随supervisord一起启动 startsecs=10 ; 当前被管理程序启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒，根据具体服务的启动时长进行改变，比如java就比较慢 autorestart=true ; 当前被管理程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启 startretries=1 ; 当前被管理程序启动失败自动重试次数，默认是3 user=root ; 用哪个用户启动当前被管理程序，默认是root priority=999 ; 当前被管理程序启动优先级，默认999，该值最小的优先启动 redirect_stderr=true ; 重定向stderr错误日志到stdout标准日志，默认false，一般都会重定向到一个 stdout_logfile=/var/log/nginx/nginx.log ; 程序运行输出的stdout标准日志文件（正常运行日志），需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录 stdout_logfile_maxbytes=20MB ; stdout 日志文件大小，默认50MB stdout_logfile_backups=20 ; stdout 日志文件备份数，默认是10 ;stderr_logfile=/opt/apache-tomcat-8.5.87/logs/catalina.err ; 程序运行输出的stderr错误日志文件输出路径 ;stderr_logfile_maxbytes=1MB ; stderr 日志文件大小，默认50MB ;stderr_logfile_backups=10 ; stderr 日志文件备份数，默认是10 ;stopasgroup=false ; 默认为false，当前被管理程序被杀死时是否向这个进程组发送stop信号，包括子进程 ;killasgroup=false ; 默认为fakse，当前被管理程序被杀死时是否向这个进程组发送kill信号，包括子进程 切记：配置中的日志输出路径和日志文件一定要提前创建，否则启动失败\n当添加/修改子进程配置之后，可以使用supervisorctl reread进行配置检查，配置无误后通过supervisorctl update更新配置。\n此时在后台就可以直接看见新增的子进程\n5 常用命令介绍 supervisorctl status nginx # nginx状态 supervisorctl stop nginx # 停止nginx supervisorctl start nginx # 启动nginx supervisorctl restart nginx # 重启nginx supervisorctl reoload nginx # 重载nginx supervisorctl update nginx # 配置文件修改后可以使用该命令加载新的配置 # 所有子进程 supervisorctl start all # 启动所有被监控的进程 supervisorctl stop all # 停止所有被监控的进程 supervisorctl restart all # 重启所有被监控的进程 supervisorctl reload all # 重新加载所有被监控的进程的配置 supervisorctl shutdown # 关闭Supervisor # 主要针对supervisord.conf配置文件的刷新，而不需要重启 Supervisor 进程。当修改了supervisord.conf，例如增加或修改了进程配置时，使用 reload 命令可以应用这些更改。重要的是，reload 不会中断已经在运行的进程，只会影响新的配置更改。 supervisorctl reload # 检查supervisord配置和引入的子进程配置文件，如果配置文件没有问题，将显示 xxxxxxx: available supervisorctl reread # 主要针对子进程配置文件的刷新，它关注于管理和操作已定义的进程，而不会重新加载 supervisord.conf 的主配置文件。 supervisorctl update ","permalink":"https://eayonlee.com/tech/linux/supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/","summary":"1 简介 Supervisor是用Python开发的一套通用的进程管理工具，能将一个普通的命令行变为后台Daemon，并监控进程状态，异常退出时能自动重启。是通过 fork/exec 的方式把这些被管理的进程当作Supervisor的子进程来启动，这样只要在Supervisor的配置文件中，把要管理的进","title":"Supervisor进程管理工具"},{"content":" Eayon\u0026#39;s Blog 一个分享技术、阅读、生活的博客 ","permalink":"https://eayonlee.com/links/","summary":"Eayon\u0026#39;s Blog 一个分享技术、阅读、生活的博客","title":"🤝 Links"},{"content":" section .data name db \u0026#34;Eayon Lee\u0026#34;, 0 prefer_name db \u0026#34;Eayon\u0026#34;, 0 born_year dd 1997 hometown db \u0026#34;Suqian, Jiangsu, CN\u0026#34;, 0 curr_location db \u0026#34;Chaoyang, Beijing, CN\u0026#34;, 0 ","permalink":"https://eayonlee.com/about/","summary":"section .data name db \u0026#34;Eayon Lee\u0026#34;, 0 prefer_name db \u0026#34;Eayon\u0026#34;, 0 born_year dd 1997 hometown db \u0026#34;Suqian, Jiangsu, CN\u0026#34;, 0 curr_location db \u0026#34;Chaoyang, Beijing, CN\u0026#34;, 0","title":"🙋🏻‍♂️ About"}]